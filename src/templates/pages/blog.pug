doctype html
html(lang='ru')
    head
        meta(charset='UTF-8')
        meta(name='viewport', content='width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0')
        meta(content='ie=edge', http-equiv='x-ua-compatible')
        meta(http-equiv='X-UA-Compatible', content='ie=edge')
        link(rel='shortcut icon', type='image/x-icon', href='images/favicon/favicon.ico')
        link(rel='stylesheet', href='css/style.min.css')
        title Blog
    body
        .wrapper
            .container
                section.section.blog(data-type="background" data-speed="10")
                    include ../common/header
                    .user-blog(data-type="background" data-speed="10")
                        .foto
                            img.foto__user(src='images/img/im.jpg', alt='i')
                        .user-name
                            h1.title.title-blog блог
                            p.user__text Статьи , которые я написал
                    a.arrow-scroll(href="#main-blog" )
                        svg.icon__scroll(viewbox='0 0 50 50', width='25', height='25' preserveAspectRatio="none")
                            use(xlink:href='images/icons/sprite.svg#arrow_down')
                    .about__triangle-blog
                        svg.about__triangle-white(xmlns="http://www.w3.org/2000/svg", viewbox='0 0 1000 85', preserveAspectRatio="none")
                            polygon.about__triangle_left(fill="#ffffff" points="0,0 0,86 500.8,86 500.8,75.5" )
                            polygon.about__triangle_right( fill="#ffffff" points="1000,0 1000,86 500,86 500,75.5" )
                section.section.main-blog(id="main-blog")
                    aside.saidbar
                        ul.saidbar__list
                            li.saidbar__item
                                a.saidbar__link(href="#article1")
                                    | Самое важное в
                                    | SASS
                            li.saidbar__item
                                a.saidbar__link(href="#article2")
                                    | Приёмы в вёрстке, без которых не
                                    | обходится ни один сайт
                            li.saidbar__item
                                a.saidbar__link(href="#")
                                    | Самый необходимый набор Gulp
                                    | плагинов
                            li.saidbar__item
                                a.saidbar__link(href="#") Почему я выбрал Jade
                    .articles
                        article.article(id="article1")
                            h2.subtitle Самое важное в SASS
                            p.article__data
                                time.data__time 22 ноября 2016
                            p.article__text
                                | CSS это хорошо , НО! В верстке как не крути важным фактором является время. Поэтому было принято решение познать препроцессоры.
                                | Просмотрев видео, а так же всевозможные примеры препроцессоров , я понял, что мне больше по душе SCSS, т.к. он ближе по синтаксису к CSS .
                                | Начнем с того, что именно SASS используют многие гиганты IT, как eBay, BBC, Instagram, LinkedIn, Groupon и т.д. Почему? Потому, что scss -это по сути будущее css, переменные (уже поддерживаются браузерами), миксины и вообще все фишки препроцессора в скором (относительно) времени будут доступны в css.
                                | Правильная архитектура Sass имеет решающее значение для создания поддерживаемого, масштабируемого и хорошо организованного проекта. Sass упрощает разделение вашего проекта на логические модули с помощью директивы @import, которая отличается от нативного @import в CSS тем, что подключает файлы .scss и .sass перед генерацией CSS.
                            img.code__img(src='images/img/scss.jpg', alt='code')
                        article.article(id="article2")
                            h2.subtitle Приёмы в вёрстке, без которых не обходится ни один сайт
                            p.article__data
                                time.data__time 11 ноября 2017
                            p.article__text
                                | Вёрстка веб-страниц — это не просто знание приёмов и хитростей создания различных эффектов. Это умение предугадывать результат действий с элементами веб-страниц и понимание особенностей различных браузеров, которые могут по-разному отображать сайт. Деятельность разработчика сайта сродни работе шеф-повара, который точно знает, какие ингредиенты и в каком количестве нужно положить, чтобы улучшить вкус готового блюда.
                                | Тектс.Красиво и элегантно оформленный текст может лучше передать задумку автора и привлечь к себе внимание. К тому же с таким текстом приятнее работать, он лучше воспринимается, и пользователи это ценят
                                |
                        article.article(id="article3")
                            h2.subtitle Самый необходимый набор Gulp плагинов
                            p.article__data
                                time.data__time 3 декабря 2017
                            p.article__text Gulp — это сборщик проектов, который сам по себе ничего кроме организации потоков не умеет. Зато у него есть тьма плагинов, которые умеют все, что надо для front-end. Лично мне надо чтобы мои SCSS собирались в css, а JS минифицировались.
                            p.article__text gulp-autoprefixer — один из самых полезных плагинов, который автоматически расставляет префиксы к CSS свойствам.
                            p.article__text gulp-browser-sync — вероятно, самый нужный инструмент, с точки зрения повышения продуктивности веб-разработчиков. BrowserSync создает подключение, после чего производит автообновление страницы во всех браузерах на всех устройствах при изменениями не только клиентских или даже серверных файлов. А плюс ко всему синхронизирует позицию скроллинга и заполненные данные в формах.
                            p.article__text gulp-imagemin – оптимизация изображений.
                            p.article__text gulp-sass компиляция SASS в CSS
                            p.article__text gulp-group-css-media-queries ищет одинаковые медиа условия и группирует их
                            p.article__text gulp-concat объединение файлов
                            p.article__text gulp-uglify сжатие файла
                            p.article__text gulp-pug компиляция PUG в HTML
                        article.article(id="article4")
                            h2.subtitle Почему я выбрал Jade(Pug)
                            p.article__data
                                time.data__time 20 декабря 2017
                            p.article__text
                                | Jade — это препроцессор HTML и шаблонизатор, который был написан на JavaScript для Node.js. Проще говоря, Jade — это именно то средство, которое предоставляет вам возможность написания разметки совершенно по новому, с целым рядом преимуществ по сравнению с обычным HTML
                            p.article__text К примеру, взгляните на код ниже в формате HTML:
                            img.code__img(src='images/img/jade.jpg', alt='code')
                            p.article__text А так эта разметка выглядит в формате Jade:
                            img.code__img(src='images/img/html.jpg', alt='code')
                            p.article__text
            include ../common/footer
        script(src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js")
        script(src='js/bundle.js')